{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","_ref","name","email","username","react_default","a","createElement","className","src","concat","alt","CardList","robots","map","robot","src_components_Card","key","id","SearchBox","searchfield","searchChange","type","placeholder","onChange","style","height","textAlign","Scroll","props","overflowY","children","ErrorBoundry","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","error","info","setState","hasErro","Component","App","_this$props","searchField","onSearchChange","isPending","filteredRobots","filter","toLowerCase","includes","components_SearchBox","components_Scroll","components_ErrorBoundry","src_components_CardList","onRequestRobots","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","Array","isArray","length","catch","err","message","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","initialStateSearch","initialStateRobots","rootReducer","combineReducers","arguments","undefined","action","assign","store","createStore","applyMiddleware","logger","thunkMiddleware","ReactDOM","render","es","src_containers_App","document","getElementById","URL","process","origin","addEventListener","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.952edd42.chunk.js","sourcesContent":["import React from 'react';\nimport './Card.css';\n\nconst Card = ({name, username, email}) => {\n    return (\n        <div className='card grow bg-light-blue'>\n            <img src={`https://robohash.org/${name}?200x200`} alt='user'/>\n            <div>\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </div>\n    );\n};\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\nimport './CardList.css';\n\nconst CardList = ({ robots }) => {\n    return (\n        <div className=\"cardList\">\n            {\n                robots.map(robot => {\n                    return <Card \n                        key={robot.id} \n                        name={robot.name} \n                        username={robot.username} \n                        email={robot.email}\n                    />\n                })\n            }\n        </div>\n    );\n};\n\nexport default CardList","import React from 'react';\n\nconst SearchBox = ({searchfield, searchChange}) => {\n    return (\n        <div className='pa2'>\n            <input \n                type='search' \n                placeholder='search robots'\n                onChange={searchChange}\n                style={{height: '50px', textAlign: 'center'}}\n            />\n        </div>\n    );\n};\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n    return (\n        <div style={{overflowY: 'scroll'}}>\n            {props.children}\n        </div>\n    )\n}\n\nexport default Scroll;","import React, { Component } from 'react';\n\nclass ErrorBoundry extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            hasError: false\n        };\n    }\n    \n    componentDidCatch(error, info){\n        this.setState({ hasError: true});\n    }\n    \n    render(){\n        if (this.state.hasErro){\n            return <h1>Ooops, error detected, abort.. abort!!!</h1>\n        } else {\n            return this.props.children;\n        }\n    }\n}\n\nexport default ErrorBoundry;","import React, {Component} from 'react';\nimport { connect } from 'react-redux';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundry from '../components/ErrorBoundry';\nimport './App.css';\n\nimport { setSearchField, requestRobots } from '../actions';\n\nconst mapStateToProps = state => {\n    return {\n        searchField: state.searchRobots.searchField,\n        robots: state.requestRobots.robots,\n        isPending: state.requestRobots.isPending,\n        error: state.requestRobots.error\n    };\n}\n    \nconst mapDispatchToProps = (dispatch) => {\n    return {\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n        onRequestRobots: () => dispatch(requestRobots())\n    };\n};\n\nclass App extends Component {\n    \n    render(){\n        const {searchField, onSearchChange, robots, isPending } = this.props;\n        const filteredRobots = robots.filter(robot => robot.name.toLowerCase().includes(searchField.toLowerCase()));\n\n        if (isPending){\n            return <h1 id='heading'>Loading Robots!!</h1>\n        } else {\n            return (\n                <div className='page'>\n                    <h1 id='heading'>Robo Friends</h1>\n                    <SearchBox searchChange={onSearchChange}/>\n                    <Scroll>\n                        <ErrorBoundry>\n                            <CardList robots={filteredRobots}/>\n                        </ErrorBoundry>\n                    </Scroll>\n                </div>\n            );\n        }\n    }\n    \n    componentDidMount(){\n        this.props.onRequestRobots();\n    }\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { \n    CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAIL\n } from './constants.js';\n\nexport const setSearchField = (text) => ({\n    type: CHANGE_SEARCH_FIELD,\n    payload: text\n});\n\nexport const requestRobots = () => (dispatch) => {\n    dispatch({ type: REQUEST_ROBOTS_PENDING });\n    fetch('https://jsonplaceholder.typicode.com/users')\n        .then(response => response.json())\n        .then(robots => {\n            //added check to make sure returned robots is an array that has something in it\n            if (Array.isArray(robots) && robots.length > 0) dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: robots })\n            else dispatch({ type: REQUEST_ROBOTS_FAIL, payload: 'No Robots Returned'});\n        })\n        .catch(err => dispatch({ type: REQUEST_ROBOTS_FAIL, payload: err.message }));\n};","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAIL = 'REQUEST_ROBOTS_FAIL';","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\n    CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAIL\n} from './constants.js';\n\nconst initialStateSearch = {\n    searchField: '',\n};\n\nexport const searchRobots = (state = initialStateSearch, action={}) => {\n    switch(action.type){\n        case CHANGE_SEARCH_FIELD: \n            return Object.assign({}, state, { searchField: action.payload });\n        default: \n            return state;\n    }\n};\n\nconst initialStateRobots = {\n    isPending: false,\n    robots: [],\n    error: ''\n};\n\nexport const requestRobots = (state = initialStateRobots, action={}) => {\n    switch(action.type){\n        case REQUEST_ROBOTS_PENDING:\n            return Object.assign({}, state, { isPending: true });\n        case REQUEST_ROBOTS_SUCCESS:\n            return Object.assign({}, state, { robots: action.payload, isPending: false });\n        case REQUEST_ROBOTS_FAIL:\n            return Object.assign({}, state, { error: action.payload, isPending: false });\n        default:\n            return state;\n    }\n};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { logger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport {searchRobots, requestRobots} from './reducers';\n\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\nconst store = createStore(rootReducer\n     , applyMiddleware(\n          logger, \n         thunkMiddleware)\n);\n \nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>\n        , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}